[{"/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/index.js":"1","/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/App.js":"2","/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/reportWebVitals.js":"3","/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/components/calendar/Calendar.js":"4","/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/components/WithFetch.js":"5"},{"size":500,"mtime":1610417131907,"results":"6","hashOfConfig":"7"},{"size":259,"mtime":1610690054863,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610417131947,"results":"9","hashOfConfig":"7"},{"size":3223,"mtime":1610690087030,"results":"10","hashOfConfig":"7"},{"size":2312,"mtime":1610689775161,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"137q0n4",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/index.js",[],["24","25"],"/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/App.js",[],"/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/reportWebVitals.js",[],"/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/components/calendar/Calendar.js",[],"/mnt/c/Users/BenG/Desktop/Projects/h4i/happy-hats/frontend/src/components/WithFetch.js",["26","27"],"import React, { useState, useEffect } from \"react\";\nimport moment from 'moment';\n\nfunction withFetch(WrappedComponent, reqUrl, formatter = null) {\n  function WithFetch(props) {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n      // setFetchData();\n      setData(mockedData());\n    }, []);\n\n    const setFetchData = async () => {\n      try {\n        const response = await fetch(reqUrl);\n        if (!response.ok) {\n          console.log(response);\n          return;\n        }\n        const jsonResponse = await response.json();\n        setData(!!formatter ? formatter(jsonResponse) : jsonResponse);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const mockedData = () => {\n      switch (props.accountType) {\n        case 'volunteer':\n        case 'admin': {\n          return {\n            events: [\n              {\n                start: moment().toDate(),\n                allDay: false,\n                end: moment().add(1, \"hours\").toDate(),\n                title: \"Some title\",\n                resource: \"test\"\n              },\n              {\n                start: moment().toDate(),\n                allDay: false,\n                end: moment().add(1, \"hours\").toDate(),\n                title: \"Other stuff\",\n                resource: \"test\"\n              },\n              {\n                start: moment().add(2, \"hours\").toDate(),\n                allDay: false,\n                end: moment().add(1, \"hours\").toDate(),\n                title: \"More\",\n                resource: \"test\"\n              },\n            ],\n          }\n        }\n        case 'hospital': {\n          return {\n            events: [\n              {\n                start: moment().toDate(),\n                allDay: false,\n                end: moment().add(1, \"hours\").toDate(),\n                resource: \"cape order\"\n              },\n              {\n                start: moment().add(1, \"days\").toDate(),\n                allDay: false,\n                end: moment().add(1, \"days\").toDate(),\n                resource: \"cape order\"\n              },\n            ],\n          }\n        }\n        default: {\n          console.log('Invalid stuff');\n          break;\n        }\n      }\n    };\n\n    return <WrappedComponent data={data} {...props} />;\n  }\n\n  return WithFetch;\n}\n\nexport default withFetch;\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":11,"column":8,"nodeType":"34","endLine":11,"endColumn":10,"suggestions":"35"},{"ruleId":"36","severity":1,"message":"37","line":13,"column":11,"nodeType":"38","messageId":"39","endLine":13,"endColumn":23},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mockedData'. Either include it or remove the dependency array.","ArrayExpression",["42"],"no-unused-vars","'setFetchData' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [mockedData]",{"range":"45","text":"46"},[303,305],"[mockedData]"]